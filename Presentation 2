Subject
Якщо подія була створена до того як підписався то підписник її не бачить. 

Вступ Щоб трішки нагадати

===========================х-ʼ 3 ʼ-х===================================
Обсервебл - Стрім. Спостережувальна сутність. те чим ми називаємо те за чим ми будемо слідкувати. 
            видає дані послідовно в часовому потоці

Обсервер - Бере дані з обсервбл потоку і вже знає як працювати з даними.

Сабскрайбер - Спостерігач. Те що приймає дані . next error complete
Підписавшись тільки тоді отримуємо дані

===========================х-ʼ 4 ʼ-х===================================
На кожну підписку створюється окремий потік даних. Так себе поводять більшість обсервеблів один тип 

===========================х-ʼ 5 ʼ-х===================================
є щей другий тип де одні і тіж самі дані розїодяться між всіма підписникаим

===========================х-ʼ 6 ʼ-х===================================
Що це таке й для чого взашалі. Деколи є такі ситуації коли нам потрібно зробити щоб не було 2 запити на сервер.

===========================х-ʼ 7 ʼ-х===================================
з цим нам допоможе Сабджект
Це така суміш обсервбл і обсервер
тобто ми на сабджект можемо сабскрайбитись і виводити наші дані
а також в цей же сабджект можем передавати дані.

===========================х-ʼ 8 ʼ-х===================================
Ключова штука цього слайду ніж на попередньому. що тут значення отримують всі підписники одинакові.
тут обсервеблом являється сабджект на який ми підписуємось. ну і обсервером функція в якій ми передаємо дані

===========================х-ʼ 9 ʼ-х===================================
один підписався зразу і відписавсяю а інший через 2с підписався
головне що генерація значень не закінчується коли на сабжект ніхто не підписаний.

===========================х-ʼ 10 ʼ-х===================================
Є декілька типів сабджекта які позволяють вирішувати різного роду проблеми лекше і швидше.

===========================х-ʼ 11 ʼ-х===================================
біхевіор сабджект
Той хто підписується отримує останнє значення перед тим як він підписався
Обов'язково передаються якісь початкові дані

===========================х-ʼ 12 ʼ-х===================================
реплейс сабджект
той хто підписався отримує всі дані одразуж. передаваємі дані це числовий параметр. це буфер останніх значень. не обов'язково

===========================х-ʼ 13 ʼ-х===================================
асинк сабджект.
Ну тут  йому всерівно на потік і отримує лишень останнє значення і лише тоді коли потік завершився.
і якщо потік закінчився всерівно отримає останнє
Дуже схожий на проміси

===========================х-ʼ 14 ʼ-х===================================
Може дивувати що ми в сабскрайб передаємо створений сабджект. Але я вже говорив. що він може бути як обсервбл і обсервер
В обсервера є методи некст еррор і комплит

===========================х-ʼ 15 ʼ-х===================================
розробники придумали мултікаст
конект можна визивати і пізніше. коли ми визвемо коннект 
тоді все й запрацює

===========================х-ʼ 16 ʼ-х===================================
для кожного із 4 типів мультікаст сабджектів придумали скорочення. якщо аргументи приймались в сабджекти той пишуться в 
операторі
головна штука це коннект. пабліш видає так називаємий конектбл обсервбл
як визов нам треба сказати ну типу давай уже запускай значення

з конектами хитра штука. якщо код великий не удобно буде де той конечкт коли його стартувати + ще треба звертати 
увагу потім коли відписуват
Памятаєте я казав що сабджект генерує значення не залежачи від того чи на нього хтось підписаний
Дуже не зручно що потрібно керувати стартом і закінченням.   Ну і придумали оператор refCount()

===========================х-ʼ 17 ʼ-х===================================
refCount() стартує стрім коли підписується 0 -> 1 і зупиняється генерація значень коли останній відписується 1 -> 0
3 починає рахунок з 0

===========================х-ʼ 18 ʼ-х===================================
чому не проміси
В проміса є два стани або він в Ресолв Реджект. Проміс ми не можемо ПЕРЕЗАПУСТИТИ. не можемо ПРЕЗУПИНИТИ
Ми можемо тільки його запустити й дочекатись кінця і потім він нам поверне або резолв або реджект (помулку)
проблема Ми беремо один раз об'єкт тобто якесь значеньня. Воно проходить один раз через проміс, ми отримуємо результат і все
повторити ми не можемо

навідмуну в рх ми можемо отримувати енну кількість значень, щось з ними асинхронно робити, підписуватись слухати зміни.
також ми можемо щось зупинити, перезапустити в випадку якщо попередня операція провалилась (наприклад це був колл на беккенд
провалився) і ми хочемо ще раз попробувати типу може другого разу вийде(там може сервер рестартував, або була якась затримка)
можемо робити retry декілька раз скільки нам буде потрібно можем щось поставити на паузу і все буде супер )

