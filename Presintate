//========================= _ 1 _ ================================//
RxJS - Це бібліотека, написана на язику JavaScript. Яка дуже зручнопозволяє працювати з різними типами даних, 
в тому числі і з асинхронними. Трансформувати, обробляти, фільтрувати і всяке таке
і вона Популяризує реактивний підхід до програмування.
Ну це типу книжне формулювання. 
Туму краще зразу на прикладах поясню

Реактивність
В тому що в Комірці Д і Е ми не визиваємо кожин раз при зміні даних знову функцію суми чи там вичеслення проценту
Ми просто вказали що внас є звязок від комірок  А Б Ц і при їх зміні в нас автоматично міняються всі решта значень.
Реактивність. Реакція на зміну )

observable - штука яка видає нам дані. послідовно в часі
observer - спостерігач. знає як обробляти дані, мапити, фільтрувати ну і взагалі робити всілякі мутації
subscriber - який підписується на observer і буде отримувати вже ці дані

of - Перебериє дані які мийому даєму. 
take - просто бере кількість значень
timer - як таймер. скільки чекати і дальше як інтервал
interval - просто 
range - видає кількість від і скільки
//========================= _ 1 _ ================================//

//========================= _ 2 _ ================================//
Створення першого стріму. Все дуже просто 
Створюємо змінну лет називаємо її "стрім" (знак долара принято ставити щоб показати що це є асинхронний стрім )
звертаємось до бібльотеки. і до її класу Observable. далі в цього класу визиваємо метод create() в якості аргументів в метод 
create() передається колбек функція а в якості аргумента обєкт observer ( з допомогою якого можна вже обробляти якісь асинхронні штуки )
 і дивимось. і зараз нічого не відбудиться. так як ми створили стрім але не підписались на нього 
Наприклад з життя. всі знають що таке ютуб
//========================= _ 2 _ ================================//

//========================= _ 4 _ ================================//
// => Неважливо який масив для всіх масивів використовуємо "from"
const map = new Map([[1, 2], [3, 4], ['5', '6']]);
const set = new Set([1,2,3,'4', {id: 6}]);
const arr = [
    {
        id: 1,
        name: 'JR-1'
    },
    {
        id: 2,
        name: 'JR-2'
    }
];

// rxjs.from(set) rxjs.from(arr)
rxjs.from(map)
    .subscribe(createSubscribe('from'));
//========================= _ 4 _ ================================//


//========================= _ 6 _ ================================//
завдяки цим операторам
rxjs Рахується дуже комфортною бібліотекою для роботи з даними

pipe() 

Якщо потрібно використати декілька операторів разом. 
"pipe()" - приймає за свої аргументи функції, які потрібно об'єднати,
і повертає нову функцію, яка при виконанні виконує послідовно складені функції
В ангулярі надається перевага пайпам а не ланцюгу (chaining)

map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R>
Обов'язково має повертати щось
map() - Застосовує передану функцію до кожного переданого значення, і видає отримані значення як Observable

1) rxjs.interval(1000)
    .pipe(
        rxjs.operators.map(x => x * x),
        rxjs.operators.take(5)
    )
    .subscribe(createSubscribe('map'));

2) rxjs.of('hello', 'jaerbi', 'world')
    .pipe(
        rxjs.operators.map(x => x.toUpperCase())
    )
    .subscribe(createSubscribe('map'));

3) rxjs.fromEvent(document.querySelector('input'), 'keyup')
    .pipe(
        rxjs.operators.map(x => x.target.value),
        rxjs.operators.map(x => x.toUpperCase()),
        rxjs.operators.map(x => {
            return {
                value: x,
                length: x.length
            };
        })
    )
    .subscribe(createSubscribe('map'));

pluck() - Дістає ключі із обєкта
// rxjs.operators.map(x => x.target.value),
   rxjs.operators.pluck('target', 'value'),
//========================= _ 6 _ ================================//

//========================= _ CODE _ ================================//
function createSubscribe(name) {
    return {
        next(x) {
            console.log(name, ': ', x);
        },
        error(err) {
            console.log('Error: ', err);
        },
        complete() {
            console.log(name, ' :Completed!');
        }
    }
}

// let stream$ = rxjs.Observable.create((observer) => {
//     observer.next('Hi jaerbi');
//
//     setTimeout(() => {
//         observer.next([{y: 123, x: '321'}, 13, '123', true]);
//     }, 3000);
//
//      setTimeout(() => {
//          observer.next('You stay :)');
//      }, 2000);
//
//      setTimeout(() => {
//          observer.next('i am Heape :)');
//      }, 5000);
//
//      observer.next('Hi Bro');
// });
//
// stream$.subscribe((data) => {
//     console.log('Subscribe: ', data);
// });





// rxjs.fromEvent(document.querySelector('input'), 'keyup')
//     .pipe(
//         // rxjs.operators.map(x => x.target.value),
//         rxjs.operators.pluck('target', 'value'),
//         rxjs.operators.map(x => x.toUpperCase()),
//         rxjs.operators.map(x => {
//             return {
//                 value: x,
//                 length: x.length
//             };
//         })
//     )
//     .subscribe(createSubscribe('map'));







// const myInput = document.querySelector('input');

// 1)
// myInput.addEventListener('input', event => {
//     console.log(event.target.value);
// });

// 2)
// const p = new Promise((resolve) => {
//     myInput.addEventListener('input', (event) => {
//         resolve(event);
//     });
// });
//
// p.then(event => console.log(event.target.value));

// // 3)
// function createEventPromise() {
//     const p = new Promise((resolve) => {
//         myInput.addEventListener('input', (event) => {
//             resolve(event);
//         });
//     });
//
//     p.then(event => {
//         console.log(event.target.value);
//         createEventPromise();
//     });
// }
//
// createEventPromise();

// 4)
// function createEventPromise() {
//     let listener;
//     const p = new Promise((resolve) => {
//         listener = (event) => {
//             resolve(event);
//         };
//         myInput.addEventListener('input', listener);
//     });
//
//     p.then(event => {
//         console.log(event.target.value);
//         fetch(`https://api.github.com/search/repositories?q=${event.target.value}`)
//             .then(resp => resp.json())
//             .then((resp) => {
//                 console.log(resp.total_count);
//             });
//         myInput.removeEventListener('input', listener);
//         createEventPromise();
//     });
// }
//
// createEventPromise();

// rxjs
// let observable = rxjs.fromEvent(myInput, 'input');
//
// rxjs.fromEvent(myInput, 'input').pipe(
//     rxjs.switchMap(event => fetch(`https://api.github.com/search/repositories?q=${event.target.value}`)
//     )).subscribe((resp) => {
//         console.log(resp.total_count)
// });

// rxjs.of('hello', 'jaerbi', 'world')
//     .pipe(
//         rxjs.operators.map(x => x.toUpperCase())
//     )
//     .subscribe(createSubscribe('map'));

// rxjs.interval(1000)
//     .pipe(
//         rxjs.operators.map(x => x * x),
//         rxjs.operators.take(5)
//     )
//     .subscribe(createSubscribe('map'));

// ===================================================================

// function delay(ms = 1000) {
//     return new Promise((resolve, reject) => {
//         setTimeout(() => {
//             resolve('Yippee-ki-yay ' + ms);
//         }, ms)
//     });
// }
//
// // delay(3000).then(() => {
// //     console.log('Promise was resolved!')
// // });
//
// rxjs.from(delay(4000))
//     .subscribe(createSubscribe('fromPromise'));

// ===================================================================

// const map = new Map([[1, 2], [3, 4], ['5', '6']]);
//
// const set = new Set([1,2,3,'4', {id: 6}]);
//
// const arr = [
//     {
//         id: 1,
//         name: 'JR-1'
//     },
//     {
//         id: 2,
//         name: 'JR-2'
//     }
// ];
//
// rxjs.from(map)
//     .subscribe(createSubscribe('from'));

// const promise = new Promise((resolve) => { resolve('Hi')});
//
// from(promise);

// ===================================================================

// rxjs.of(5)
//     .subscribe(createSubscribe('of'));

//
// rxjs.range(3, 8)
//     .subscribe(createSubscribe('range'));

// rxjs.timer(5000, 500).pipe(
//     rxjs.operators.take(12)
// )
//
//     .subscribe(createSubscribe('timer'));

// rxjs.interval(500,1).pipe(
//     rxjs.operators.take(12)
// )
//     .subscribe(createSubscribe('interval'));

// rxjs.of(5,6,7,8,9)
//     .subscribe(createSubscribe('of'));

// let move = rxjs.fromEvent(document, 'mousemove');
// move.subscribe(
//     (e) => {
//         console.log(e);
//         document.querySelector('h1').innerHTML = `X: ${e.screenX} , Y: ${e.screenY}`;
//     }
// );
// rxjs.fromEvent(document.querySelector('input'), 'keyup')
//     .subscribe(e => console.log(e));
// let button = document.querySelector('button');
//
// let btn$ = rxjs.fromEvent(button, 'click');
//
// btn$.subscribe(
//     (e) => {
//       console.log(e);
//     }
// );

// let stream$ = rxjs.Observable.create((observer) => {
//     observer.next('Hi');
//
//     setTimeout(() => {
//         observer.error('AAAAAA');
//     }, 3000);
//
//     setTimeout(() => {
//         observer.next('You stay :)');
//     }, 2000);
//
//     setTimeout(() => {
//         observer.next('i am Heape :)');
//     }, 5000);
//
//     observer.next('Hi Bro');
// });

// stream$
//     .subscribe(
//         (data) => {
//             console.log('Subscribe: ', data);
//         },
//         (error) => {
//             console.log('Error: ', error);
//         },
//         () => {
//             console.log('Completed');
//         }

//========================= _ CODE _ ================================//
